#+title: 信号

* 信号的概念
信号是软件中断，信号提供了一种处理异步事件的方法。
不存在编号为 0 的信号
** 当信号出现时，应用程序可以采取的三种处理方式
1. 忽略此信号。但是又两种信号不能忽略，他们是 SIGKILL 和 SIGSTOP。这两个信号不能忽略的原因是：他们向内核和 root 用户提供了是进程终止或停止的可靠方法。
2. 捕捉信号。需要通知内核在某种信号发生时，调用一个用户函数。
3. 执行系统默认动作。绝大多数信号的系统默认动作是终止该进程
** core 文件
当应用进程异常终止时，如果开启了生成 core 文件，就会在指定目录下生成 core 文件。
*** 开启生成 core 文件
#+begin_src shell
ulimit -a #查看core文件开启状态 如果是0表示未开启
ulimit -c 0 #不生成core文件
ulimit -c 100 #最大生成100kb的core文件
ulimit -c unlimited #生成core文件，没有大小限制
#+end_src
*** 设置 core 文件的名称
1. core 文件名中加入进程 ID 。src_shell{echo 1 > /proc/sys/kernel/core_uses_pid}
2. 在 /proc/sys/kernel/core_pattern 文件中设置 core 文件名的生成规则。格式如下
#+begin_src shell
/corefile/core.%e.%p
## 参数解释如下：
## %p 添加进程ID
## %u 添加当前用户ID
## %g 添加当前组ID
## %s 添加导致产生core文件的信号ID
## %t 添加产生core文件的unix时间戳
## %h 添加主机名
## %e 添加导致产生core文件的命令名
#+end_src
*** 下列条件下不会产生 core 文件
1. 进程是设置用户 ID 的，而且当前用户并非程序文件的所有者
2. 进程是设置组 ID 的，而且当前用户并非程序文件的组所有者
3. 用户没有写当前工作目录的权限
4. 文件已存在，而且用户对该文件设有写权限
5. 文件太大，超过 RLIMIT_CORE 限制
* 信号说明
** SIGABRT
产生方式：调用 abort 函数时会产生此信号
默认动作：终止+core
** SIGALRM
产生方式：调用 alarm 函数设置定时器超时时产生此信号。setitimer 函数设置的间隔时间超时时也会产生此信号
默认动作：终止
** SIGBUG
产生方式：由实现定义的硬件故障。常常用于当出现某些类型的内存故障时会产生此信号。
默认动作：终止+core
** SIGCHLD
产生方式：当一个进程终止或停止时，其父进程会收到此信号。
默认动作：忽略
常用技巧：通常自己写的程序从会捕捉该信号，在信号处理函数中调用 wait 函数来获取子进程的终止状态等信息
** SIGCONT
产生方式：作业控制命令 bg、fg、continue 等
默认动作：如果收到此信号的进程处于停止状态，则默认动作是使进程继续运行；否则默认动作是忽略信号
** SIGEMT
产方式：由实现定义的硬件故障
默动作：终止+core
** SIGFPE
产方式：表示一个算数运算异常。如除以 0、浮点溢出等
默动作：终止+core
** SIGHUP
产方式：
1.如果终端接口检测到一个连接断开，则将此信号发送给与该终端相关的控制进程（会话首进程）。仅当终端的 CLOCAL 标志没有设置时，在前面所述条件下才会产生此信号。
2.如果会话首进程终止也会产生此信号。这种情况，此信号会送给前台进程组中的每一个进程
默动作：终止
常技巧：通常捕捉此信号用来通知守护进程再次读取他们的配置文件。原因是，守护进程不会有控制终端，通常绝不会接收此种信号
** SIGILL
产方式：表示进程已执行一条非法硬件指令
默动作：终止+core
** SIGINT
产方式：当用户按中断键(ctrl+c)时产生。终端驱动程序山城此信号并发送至前台进程组中的每一个进程
默动作：终止
** SIGIO
产方式：一个异步 IO 事件会产生此信号
默动作：linux 默认是终止，freebsd 和 macos 默认忽略
** SIGIOT
产方式：由实现定义的硬件故障
默动作：终止+core
** SIGKILL
产方式：kill 命令。此信号不能被捕捉或忽略。
默动作：终止
** SIGPIPE
产方式：
1.如果在管道的读进程已终止时写管道，则产生此信号。
2.当类型为 SOCK_STREAM 的套接字不再连接时，写该套接字也会产生此信号
默动作：终止
** SIGPOLL
产方式：当在一个可轮询的设备上发生一个特定事件时产生此信号。在 linux 中此信号和 SIGIO 是相同值
默动作：终止
** SIGPROF
产方式：当 setitimer 函数设置的梗概统计间隔定时器超时时产生此信号
默动作：终止
** SIGQUIT
产方式：在终端上按退出键时(ctrl+\)时产生此信号，并发送给前台进城组中的所有进程
默动作：终止+core
** SIGSEGV
产方式：表示进程进行了一次无效的内存引用（通常说明程序有错，比如访问了一个未初始化的指针）
默动作：终止+core
** SIGSTOP
产方式：作业控制信号
默动作：停止进程
** SIGSYS
产方式：表示一个无效的系统调用。由于某种未知原因，进程执行了一条机器指令，内核认为这是一条系统调用，但是该指令指示系统调用类型的参数却是无效的，就会产生此信号
默动作：终止+core
** SIGTERM
产方式：kill 命令默认发送的终止信号
默动作：终止
** SIGTRAP
产方式：表示一个由实现定义的硬件故障
默动作：终止+core
** SIGTSTP
产方式：交互停止信号，在终端上按挂起键(ctrl+z)时产生此信号，并发送给前台进城组中的所有进程。
默动作：停止进程
** SIGTTIN
产方式：当一个后台进程试图读其控制终端时，终端驱动程序就会产生此信号。但在下面两种情况下不会产生此信号：
a.读进程忽略或阻塞此信号
b.读进程所属的进程组是孤儿进程组，此时读操作返回出错，errno 设置为 EIO
默动作：停止进程
** SIGTTOU
产方式：当一个后台进程试图写其控制终端时，终端驱动程序就会产生此信号。详细情况看终端 IO 的知识点
默动作：停止进程
** SIGURG
产方式：此信号通知进程已经发生一个紧急情况。在网络连接上接到带外的数据时，可以选择的产生此信号
默动作：忽略
** SIGUSER1
产方式：用户自定义信号
默动作：终止
** SIGUSER2
产方式：用户自定义信号
默动作：终止
** SIGVTALRM
产方式：当一个由 setitimer 函数设置的虚拟间隔时间超时时，产生此信号
默动作：终止
** SIGWINCH
产方式：内核维持与每个终端或伪终端相关联窗口的大小。进程可以使用 ioctl 函数得到或设置窗口大小。如果进程用 ioctl 更改了窗口大小，则内核将此信号发送至前台进程组
默动作：忽略
** SIGXCPU
产方式：如果进程超过了其软 CPU 时间限制，则产生此信号
默动作：终止或终止+core
** SIGXFSZ
产方式：如果进程超过了其软文件长度限制，则产生此信号
默动作：终止或终止+core
** SIGXRES
产生方式：可选择地使用此信号以通知进程超过了预配置的资源值
默认动作：忽略






* signal 函数
** 函数定义
#+begin_src c
#include <signal.h>
void (*signal(int signo, void (*func)(int)))(int);
// 成功返回之前的信号处理配置。出错返回SIG_ERR

// 函数简化
typedef void SigFunc(int);
SigFunc *signal(int,SigFunc *);
#+end_src
~singal 函数是有 ISO C 定义的。signal 的语义与实现有关，所以最好时候 sigaction 函数替代的 signal函数。~
** 参数说明
*** signo
信号名称
*** func
1. SIG_IGN，表示忽略信号
2. SIG_DFL，表示系统默认动作
3. 当接到此信号时要调用的函数地址。此函数称为信号处理程序或信号捕捉函数
** 细节说明
1. 进程启动时，所有信号的状态都是系统默认或者忽略。
2. 当 exec 一个新的程序时，会将原先要捕捉的信号都改为默认动作。因为在 exec 的新程序中原先的信号捕捉函数地址不再有效
3. 当 fork 一个新的进程时，原先的信号处理方式还会有效，因为子进程在开始时复制了父进程的内存映像
4. 此函数无法在不修改信号处理方式的情况下获取信号的当前处理方式
* 不可靠信号
早期的信号机制是不可靠的。主要有两点表现
1. 在进程每次接到信号对其进行处理时，随机将信号动作重置为默认值
2. 在进程不希望某种信号发生时，它不能关闭该信号
* 中断的系统调用和自动重启动函数
早期 UNIX 系统有个特性：如果进程在执行一个 ~低速系统调用~ 而阻塞期间捕捉到一个信号，则该系统调用就被中断不再继续执行。该系统调用出错返回，其 errno 被设置 EINTR。
为了支持这种特性，将系统调用分为两类：
1. 其他系统调用
2. 低速系统调用。可能会使进程永远阻塞的一类系统调用，包括:
   a. 如果某些类型文件(如读管道、终端设备和网络设备)的数据不存在，则读操作可能会使调用者永久阻塞
   b. 如果这些数据不能被相同的类型文件立即接受，则写操作可能会使调用者永久阻塞
   c. 在某种条件发生之前打开某些类型文件，可能会发生阻塞(例如要打开一个终端设备，需要先等待与之连接的调制解调器应答)
   d. pause 函数和 wait 函数
   e. 某些 ioctl 操作
   f. 某些进程间通信函数
与磁盘 IO 相关的系统调用是一个例外。虽然读写一个磁盘文件可能暂时阻塞调用者，但是除非发生硬件故障，IO 操作总是会很快返回，并使调用者不再处于阻塞状态
为了解决低速系统调用被中断的问题，4.2BSD 系统引入了自动重启动。支持自动重启动的系统调用包括：
1. ioctl
2. read
3. readv
4. write
5. wirtev
6. wait
7. waitpid
前五个函数只对低速设备操作时才会被信号中断，而后两个在捕捉到信号时总是被中断。
~某些应用程序并不希望这些函数被中断后重启动。实现允许进程基于每个信号禁用此功能~
* 可重入函数
:PROPERTIES:
:ID:       58011717-a114-4cf6-bf1b-863705566fcb
:END:
进程捕捉到信号并对其进行处理时，进程正在执行的正常指令序列就被信号处理程序临时中断，它首先执行信号处理程序中的指令。如果从信号处理程序中返回，则继续执行在捕捉信号时进程正在执行的正常指令序列。
在执行一个函数时，进程捕捉到了信号，并开始执行信号处理程序，在这个信号处理程序中有调用了这个函数，如果能够保证函数正常执行则便是为可重入函数；反之如果这样重复调用会导致错误则是不可重入函数
在信号处理程序中保证调用安全的函数就是可重入函数，也称为异步信号安全的。在信号处理操作期间，会阻塞任何会引起不一致的信号发送
| abort         | faccessat   | linkat            | select      | socketpair       |
| accept        | fchmod      | listen            | sem_post    | stat             |
| access        | fchmodat    | lseek             | send        | symlink          |
| aio_error     | fchown      | lstat             | sendmsg     | symlinat         |
| aio_return    | fchownat    | mkdir             | sendto      | tcdrain          |
| aio_suspend   | fcntl       | mkdirat           | setgid      | tcflow           |
| alarm         | fdatasync   | mkfifo            | setpgid     | tcflush          |
| bind          | fexecve     | mkfifoat          | setsid      | tcgetattr        |
| cfgetispeed   | fork        | mknod             | setsockopt  | time             |
| cfgetospeed   | fstat       | mknodat           | setuid      | timer_getoverrun |
| cfsetispeed   | fstatat     | open              | shutdown    | timer_gettime    |
| cfsetospeed   | fsync       | openat            | sigaction   | timer_settime    |
| chdir         | ftruncate   | pause             | sigaddset   | times            |
| chmod         | futimens    | pipe              | sigdelset   | umask            |
| chown         | getegid     | poll              | sigemptyset | uanme            |
| clock_gettime | geteuid     | posix_trace_event | sigfillset  | unlink           |
| close         | getgid      | pselect           | sigismember | unlinkat         |
| connect       | getgroups   | raise             | signal      | utime            |
| creat         | getpeername | read              | sigpause    | utimensat        |
| dup           | getpgrp     | readlink          | sigpending  | utimes           |
| dup2          | getpid      | readlinkat        | sigprocmask | wait             |
| execl         | getppid     | recv              | sigqueue    | waitpid          |
| execle        | getsockname | recvfrom          | sigset      | write            |
| execv         | getsockopt  | recvmsg           | sigsuspend  |                  |
| execve        | getuid      | rename            | sleep       |                  |
| _Exit         | kill        | renameat          | socketmark  |                  |
| _exit         | link        | rmdir             | socket      |                  |
有一个通用规则，则信号处理程序中需要保存 errno 的值，在退出信号处理函数时恢复 errno 值。
* 可靠信号术语和语义
** 相关术语
1. 产生信号：发生硬件异常、软件条件、终端产生的信号或者调用 kill 函数。
2. 递送信号：当信号采取了某种动作时，我们称为向进程 ~递送~ 了一个信号。
3. 未决状态：在产生信号和递送信号之间的时间间隔，称信号是 ~未决的~
4. 信号屏蔽字：规定了当前要阻塞递送到该进程的信号集。对于每种可能得信号，该屏蔽中都有一位与之对应。
** 阻塞信号
如果进程阻塞了某个信号，那么在进程运行期间产生了此信号，而且进程对此信号的处理方式是系统默认动作或者捕捉信号，则该进程将此信号保持为未决状态，直到进程接触对此信号的阻塞，或者将对此信号的动作改为忽略。
内核在递送一个原来被阻塞的信号给进程时，才决定对它的处理方式。所以进程在信号递送给它之前仍可以改变对此信号的动作
** 信号排队
如果在进程阻塞信号期间，产生了多次信号那么支持 POSIX.1 实时扩展的系统，会将信号进行排队。否则大多数系统不进行排队，而是只递送一次该信号。
* kill 函数和 raise 函数
#+begin_src c
#include <signal.h>
int kill(pid_t pid, int signo);
int raise(int signo);
//成功返回0，出错返回-1
#+end_src
kill 函数将信号发送给进程或进程组。raise 函数向调用进程自身发送信号
** 参数解释
*** PID
kill 函数的 pid 参数有 4 中不同的情况：
1. pid > 0：将信号发送给进程为 pid 的进程
2. pid == 0：将该信号发送给与调用进程属于同一进程组的所有进程。不包括系统进程集，如内核进程和 init 进程
3. pid < 0：将信号发送给其他进程组 ID 等于 pid 的绝对值，而且调用进程具有权限向其发送信号的所有进程
4. pid == -1：将该信号发送给调用进程有权限向它们发送的所有进程。
超级用户可以发送给任意进程；非超级用户的规则时发送者的实际用户 ID 或有效用户 ID 等于接收者的实际用户 ID 或有效用户 ID。如果支持设置用户 ID，则还会检查保存设置用户 ID。
有一个特例：如果发送的信号时 SIGCONT，则进程可以将它发送给属于同一会话的任一其他进程
*** signo
POSIX.1 将信号编号 0 定义为空信号。如果 signo 参数时 0，则 kill 扔执行正常的错误检查，但不发送信号。
通常用这一特性来确定进程是否存在。如果向一个不存在的进程发送空信号，kill 会返回-1，errno 设置为 ESRCH。
应注意，UNIX 系统经过一定时间后会重新使用进程 ID，所以测试不一定有效
* 函数 alarm 和 pause
#+begin_src c
#include <unistd.h>
unsigned int alarm(unsigned int seconds);
// 返回0或之前设置的闹钟时间的剩余秒数
#+end_src
alarm 函数设置一个定时器，当定时器超时时，产生 SIGALRM 信号，默认动作时终止调用进程
每个进程只能有一个闹钟时间。如果调用之前已经有一个闹钟了，则设置本次调用的参数，返回上次调用的剩余秒数。
如何本次调用设置为 0，则表示取消闹钟

#+begin_src c
#include <unistd.h>
int pause(void);
// 返回-1，errno设置为EINTR
#+end_src
pause 函数使调用进程挂起直到捕捉到一个信号。
只有执行了一个信号处理程序并从其返回时，pause 才返回
* 信号集
不同的信号的编号可能超过一个整型量所包含的位数，所以不能用整型量中的一位代表一种信号。因此需要需要一个信号集类型
#+begin_src c
#include <signal.h>

int sigemptyset(sigset_t *set); // 初始化信号集，并清空所有信号
int sigfillset(sigset_t *set); // 初始化信号集，并添加全部信号
int sigaddset(sigset_t *set, int signo); // 向信号集中添加信号
int sigdelset(sigset_t *set, int signo); // 从信号集中删除信号
// 以上4个函数成功返回0；出错返回-1

int sigismember(const sigset_t *set, int signo);
// 条件为真，返回1；若假返回0
#+end_src
在使用信号集之前，必须调用一次 sigemptyset 或者 sigfillset 一次。
* 函数 sigprocmask
在[[可靠信号术语和语义][可靠信号术语和语义]]一节中提及一个进程的信号屏蔽字规定了当前阻塞而不能递送给该进程的信号集。
#+begin_src c
#include <signal.h>

int sigprocmask(int how, const sigset_t *restrict set, sigset_t *restrict oset);
// 成功返回0，出错返回-1
#+end_src
调用此函数可以检测或更改，或同时进行检测和更改进程的信号屏蔽字
在调用此函数后如果有任何未决的、不再阻塞的信号，则在函数返回前，至少将之中一个递送给该进程
~此函数仅为单线程进程定义的。处理多线程进程中信号的屏蔽使用另一个函数，将在线程章节中提到~
** 参数解释
*** how
有三个取值：
1. SIG_BLOCK：该进程新的信号屏蔽字是当前信号屏蔽字和 set 所指向信号集的并集。set 包含了希望阻塞的附加信号
2. SIG_UNBLOCK：该进程新的信号屏蔽字是当前信号屏蔽字和 set 所指向信号集补集的交集。set 包含了希望解除阻塞的信号
3. SIG_SETMASK：该进程新的信号屏蔽字设置为 set 所指向的值
*** set
若为空指针，则不改变进程的信号屏蔽字，how 参数的值也无意义
*** oset
如果此参数非空，那么进程的当前信号屏蔽字通过此参数返回
* 函数 sigpending
#+begin_src c
#include <signal.h>

int sigpending(sigset_t *set);
// 成功返回0，出错返回-1
#+end_src
此函数返回一个信号集，对于调用进程而言，其中的各信号是阻塞不能递送的，因而也一定是当前未决的。
* 函数 sigaction
#+begin_src c
#include <signal.h>

int sigaction(int signo, const struct sigaction *restrict act, struct sigaction *restrict oact);

struct sigaction {
    void (*sa_handler)(int); //信号处理函数
    sigset_t sa_mask; // 需要阻塞的信号
    int sa_flags; // 信号选项
    void (*sa_sigaction)(int, siginfo_t *, void *);
};
// 成功返回0；出错返回-1
#+end_src
此函数的功能是检查或修改与指定信号相关联的处理动作
** 参数说明
*** sigaction.sa_handler
指向捕捉到信号时要执行的函数
*** sigaction.sa_mask
在该信号捕捉函数执行之前，这一信号集会加到进程的信号屏蔽字中。操作系统会自动将接受信号也加入到屏蔽字中
仅当从信号捕捉程序返回时再将进程的信号屏蔽字恢复为原先值。
